#+TITLE: 4Clojure Solutions & Notes
#+AUTHOR: Andrew Jarrett
#+EMAIL: ahrjarrett@gmail.com
#+OPTIONS: toc:nil num:nil

My answers to various [[http://www.4clojure.com/][4Clojure]] problems.

* Elementary
** Problem 3
[[http://www.4clojure.com/problem/3][Intro to Strings]]
- Clojure strings are Java strings. This means that you can use any of the Java string methods on Clojure strings.
#+BEGIN_SRC clojure
(= "HELLO WORLD" (.toUpperCase "hello world"))
#+END_SRC

** Problem 4
[[http://www.4clojure.com/problem/4][Intro to Lists]]
- Lists can be constructed with either a function or a quoted form.
#+BEGIN_SRC clojure
(= (list :a :b :c) '(:a :b :c))
#+END_SRC

** Problem 5
[[http://www.4clojure.com/problem/5][Lists: conj]]
- When operating on a list, the conj function will return a new list with one or more items "added" to the front. Note that there are two test cases, but you are expected to supply only one answer, which will cause all the tests to pass.
#+BEGIN_SRC clojure
(= (list 1 2 3 4) (conj '(2 3 4) 1))
(= (list 1 2 3 4) (conj '(3 4) 2 1))
#+END_SRC

** Problem 6
[[http://www.4clojure.com/problem/6][Intro to Vectors]]
- Vectors can be constructed several ways. You can compare them with lists. *Note:* the brackets [] surrounding the blanks __ are part of the test case.
#+BEGIN_SRC clojure
(= [:a :b :c] (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))
#+END_SRC

** Problem 7
[[http://www.4clojure.com/problem/7][Vectors: conj]]
- When operating on a Vector, the conj function will return a new vector with one or more items "added" to the end.
#+BEGIN_SRC clojure
(= (into [] '(1 2 3 4)) (conj [1 2 3] 4))
#+END_SRC

** Problem 8
[[http://www.4clojure.com/problem/8][Intro to Sets]]
- Sets are collections of unique values.
#+BEGIN_SRC clojure
(= #{:a :b :c :d} (set '(:a :a :b :c :c :c :c :d :d)))
(= #{:a :b :c :d} (clojure.set/union #{:a :b :c} #{:b :c :d}))
#+END_SRC

** Problem 9
[[http://www.4clojure.com/problem/9][Sets: conj]]
- When operating on a set, the conj function returns a new set with one or more keys "added".
#+BEGIN_SRC clojure
(= #{1 2 3 4} (conj #{1 4 3} 2))
#+END_SRC

** Problem 10
[[http://www.4clojure.com/problem/10][Intro to Maps]]
- Maps store key-value pairs. Both maps and keywords can be used as lookup functions. Commas can be used to make maps more readable, but they are not required.
#+BEGIN_SRC clojure
(= 20 ((hash-map :a 10, :b 20, :c 30) :b))
(= 20 (:b {:a 10, :b 20, :c 30}))
#+END_SRC

** Problem 11
[[http://www.4clojure.com/problem/11][Maps: conj]]
- When operating on a map, the conj function returns a new map with one or more key-value pairs "added".
#+BEGIN_SRC clojure
(= {:a 1, :b 2, :c 3} (conj {:a 1} [:b 2] [:c 3]))
#+END_SRC

** Problem 12
[[http://www.4clojure.com/problem/12][Intro to Sequences]]
- All Clojure collections support sequencing. You can operate on sequences with functions like first, second, and last.
#+BEGIN_SRC clojure
(= 3 (first '(3 2 1)))
(= 3 (second [2 3 4]))
(= 3 (last (list 1 2 3)))
#+END_SRC

** Problem 13
[[http://www.4clojure.com/problem/13][Sequences: rest]]
- The rest function will return all the items of a sequence except the first.
#+BEGIN_SRC clojure
(= [20 30 40] (rest [10 20 30 40]))
#+END_SRC

** Problem 14
[[http://www.4clojure.com/problem/14][Intro to Functions]]
- Clojure has many different ways to create functions.
#+BEGIN_SRC clojure
(= 8 ((fn add-five [x] (+ x 5)) 3))
(= 8 ((fn [x] (+ x 5)) 3))
(= 8 (#(+ % 5) 3))
(= 8 ((partial + 5) 3))
#+END_SRC

** Problem 15
[[http://www.4clojure.com/problem/15][Double Down]]
- Write a function which doubles a number.
#+BEGIN_SRC clojure
(defn double-down [n] (* n 2))
(double-down 8)
#+END_SRC

** Problem 16
[[http://www.4clojure.com/problem/16][Hello World]]
- Write a function which returns a personalized greeting.
#+BEGIN_SRC clojure
(defn greeting [name] (str "Hello, " name))
(greeting "Grizzly") ;; => "Hello, Grizzly"
(#(str "Hellow, " %) "Ash") ;; => "Hellow, Ash"
#+END_SRC

** Problem 17
[[http://www.4clojure.com/problem/17][Sequences: map]]
- The map function takes two arguments: a function (f) and a sequence (s). Map returns a new sequence consisting of the result of applying f to each item of s. Do not confuse the map function with the map data structure.
#+BEGIN_SRC clojure
(= (list 6 7 8) (map #(+ % 5) '(1 2 3)))
#+END_SRC

** Problem 18
[[http://www.4clojure.com/problem/18][Sequences: filter]]
- The filter function takes two arguments: a predicate function (f) and a sequence (s). Filter returns a new sequence consisting of all the items of s for which (f item) returns true.
#+BEGIN_SRC clojure
(= '(6 7) (filter #(> % 5) '(3 4 5 6 7)))
#+END_SRC

** Problem 52
[[http://www.4clojure.com/problem/52][Intro to Destructuring]]
- Let bindings and function parameter lists support destructuring.
#+BEGIN_SRC clojure
(= [2 4] (let [[a b c d e] [0 1 2 3 4]] (vector c e))) ;; => true
#+END_SRC

** Problem 64
[[http://www.4clojure.com/problem/64][Intro to Reduce]]
- Reduce takes a 2 argument function and an optional starting value. It then applies the function to the first 2 items in the sequence (or the starting value and the first element of the sequence). In the next iteration the function will be called on the previous return value and the next item from the sequence, thus reducing the entire collection to one value. Don't worry, it's not as complicated as it sounds.
#+BEGIN_SRC clojure
(= 15 (reduce + [1 2 3 4 5]))
(=  0 (reduce + []))
(=  6 (reduce + 1 [2 3]))
#+END_SRC

** Problem 134
[[http://www.4clojure.com/problem/134][A nil key]]
- Write a function which, given a key and map, returns true [[https://en.wikipedia.org/wiki/If_and_only_if][iff]] the map contains an entry with that key and its value is nil.
#+BEGIN_SRC clojure
(defun key-is-nil [k m]
(if (and
    (contains? m k)
    (= (k m) nil))
true
false))
(true?  (nil-check :a {:a nil :b 2})) ;; => true
(false? (nil-check :b {:a nil :b 2})) ;; => true
(false? (nil-check :c {:a nil :b 2})) ;; => true
#+END_SRC

** Problem 156
[[http://www.4clojure.com/problem/156][Map Defaults]]
- Write a function which takes a default value and a sequence of keys and constructs a map.
#+BEGIN_SRC clojure
(defn cons-map [default-val keys]
(zipmap keys (repeat default-val)))
(= (cons-map 0 [:a :b :c]) {:a 0 :b 0 :c 0})
(= (cons-map "x" [1 2 3]) {1 "x" 2 "x" 3 "x"})
(= (cons-map [:a :b] [:foo :bar]) {:foo [:a :b] :bar [:a :b]})
#+END_SRC

** Problem 161
[[http://www.4clojure.com/problem/161][Subset and Superset]]
- Set A is a subset of set B, or equivalently B is a superset of A, if A is "contained" inside B. A and B may coincide.
#+BEGIN_SRC clojure
(clojure.set/superset? #{1 2} #{2}) ;; => true
(clojure.set/subset? #{1} #{1 2}) ;; => true
(clojure.set/superset? #{1 2} #{1 2}) ;; => true
(clojure.set/subset? #{1 2} #{1 2}) ;; => true
#+END_SRC

** Problem 162
[[http://www.4clojure.com/problem/162][Logical falsity and truth]]
- In Clojure, only nil and false represent the values of logical falsity in conditional tests - anything else is logical truth.
#+BEGIN_SRC clojure
(= 1 (if-not false 1 0))
(= 1 (if-not nil 1 0))
(= 1 (if true 1 0))
(= 1 (if [] 1 0))
(= 1 (if [0] 1 0))
(= 1 (if 0 1 0))
(= 1 (if 1 1 0))
#+END_SRC

* Easy
** Problem 19
[[http://www.4clojure.com/problem/19][Last Element]]
- Write a function which returns the last element in a sequence.
#+BEGIN_SRC clojure
#(nth % (- (count %) 1))
;; Here's my old answer. So verbose!
(defn new-last-one [s]
  (if (= (count s) 1) (first s)
      (recur (rest s))))
(= (new-last-one [1 2 3 4 5]) 5)
(= (new-last-one '(5 4 3)) 3)
(= (new-last-one ["b" "c" "d"]) "d")
#+END_SRC

** Problem 20
[[http://www.4clojure.com/problem/20][Penultimate Element]]
- Write a function which returns the second to last element from a sequence.
#+BEGIN_SRC clojure
(defn penultimate [coll]
  (nth coll (- (count coll) 2)))
(= (penultimate (list 1 2 3 4 5)) 4))
(= (penultimate ["a" "b" "c"]) "b")
(= (penultimate [[1 2] [3 4]]) [1 2])
;; bonus round: use RECUR
(defn penultimate-recursive [coll]
  (if (= (count coll) 2) (first coll)
      (recur (rest coll))))
#+END_SRC

** Problem 21
[[http://www.4clojure.com/problem/21][Nth Element]]
- Write a function which returns the Nth element from a sequence.
#+BEGIN_SRC clojure
(defn nth-el [coll n]
  (if (zero? n)
    (first coll)
    (recur (rest coll) (- n 1))))
(= (nth-element '(4 5 6 7) 2) 6)
(= (nth-element [:a :b :c] 0) :a)
(= (nth-element [1 2 3 4] 1) 2)
(= (nth-element '([1 2] [3 4] [5 6]) 2) [5 6])
#+END_SRC

** Problem 22
[[http://www.4clojure.com/problem/22][Count a Sequence]]
- Write a function which returns the total number of elements in a sequence.
#+BEGIN_SRC clojure
(defn count-seq [coll]
  (loop [total 0 c coll]
    (if (empty? c) total
        (recur (inc total) (rest c)))))
(= (count-seq '(1 2 3 3 1)) 5)
(= (count-seq "Hello World") 11)
(= (count-seq [[1 2] [3 4] [5 6]]) 3)
;; Here's count-seq as a reduction:
(defn reduce-count-seq [coll]
  (reduce (fn [a _] (inc a)) 0 coll))
(reduce-count-seq '(1 2 3 4)) ;; => 4
#+END_SRC

** Problem 23
[[http://www.4clojure.com/problem/23][Reverse a Sequence]]
- Write a function which reverses a sequence.
#+BEGIN_SRC clojure
;; This one was fun!
(defn my-reverse [coll]
  (reduce conj () coll))
(my-reverse '(1 2 3 4 5))  ;; => (5 4 3 2 1)
(my-reverse [1 2 3 4 5])   ;; => (5 4 3 2 1)
;; We could make this even more condensed:
#(reduce conj '() %)
#+END_SRC

** Problem 24
[[http://www.4clojure.com/problem/24][Sum It All Up]]
- Write a function which returns the sum of a sequence of numbers.
#+BEGIN_SRC clojure
(defn sum-it-all-up [coll]
  (reduce + coll))
(= (sum-it-all-up [1 2 3]) 6)
(= (sum-it-all-up (list 0 -2 5 5)) 8)
(= (sum-it-all-up #{4 2 1}) 7)
(= (sum-it-all-up '(0 0 -1)) -1)
(= (sum-it-all-up '(1 10 3)) 14)
#+END_SRC

** Problem 25
[[http://www.4clojure.com/problem/25][Find the Odd Numbers]]
- Write a function which returns only the odd numbers from a sequence.
#+BEGIN_SRC clojure
(defn my-odd? [coll]
  (filter #(= (mod % 2) 1)
          coll))
(= (my-odd? #{1 2 3 4 5}) '(1 3 5))
(= (my-odd? [4 2 1 6]) '(1))
(= (my-odd? [2 2 4 6]) '())
(= (my-odd? [1 1 1 3]) '(1 1 1 3))
#+END_SRC

** Problem 26
[[http://www.4clojure.com/problem/26][Fibonacci Sequence]]
- Write a function which returns the first X fibonacci numbers.
#+BEGIN_SRC clojure
(defn fib [n]
  (take n
        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))
;; (Alright, I kinda cheated on this one. But this solution is so cool...)
(fib 3) ;; => (1 1 2)
(fib 6) ;; => (1 1 2 3 5 8)
(fib 8) ;; => (1 1 2 3 5 8 13 21)
#+END_SRC

** Problem 27
[[http://www.4clojure.com/problem/27][Palindrome Detector]]
- Write a function which returns true if the given sequence is a palindrome. Hint: "racecar" does not equal '(\r \a \c \e \c \a \r)
#+BEGIN_SRC clojure
(defn palindrome? [data]
  (= (seq data) (reverse data)))
(palindrome? "racecar") ;; => true
(palindrome? "racecars") ;; => false
(palindrome? '(1 2 3 3 2 1));; => true
(palindrome? [2 3 2]);; => true
(palindrome? [4 3 2]);; => false

;; (First attempt)
;; AHH. reverse returns a seq. I was making this wayy too difficult.
;;(defn palindrome? [data]
;;  (let [reversed (seq (apply str (reverse data)))
;;        original (seq data)]
;;    (do (println original reversed))
;;    (= reversed original)))
#+END_SRC

** Problem 28
[[http://www.4clojure.com/problem/28][Flatten a Sequence]]
- Write a function which flattens a sequence.
#+BEGIN_SRC clojure
;; WHEN-LET: https://clojuredocs.org/clojure.core/when-let
;; From the docs: Very useful when working with sequences. Capturing the return value 
;; of `seq` brings a performance gain in subsequent `first`/`rest`/`next`
;; calls. Also the block is guarded by `nil` punning.

;; CONS vs CONJ vs CONCAT vs LIST vs LIST*?
;; https://gist.github.com/noahlz/5510191
(defn flat [coll]
  (lazy-seq
   (when-let [s (seq coll)]
     (if (coll? (first s))
       (concat (flat (first s)) (flat (rest s)))
       (cons (first s) (flat (rest s)))))))

(= (flat '((1 2) 3 [4 [5 6]])) '(1 2 3 4 5 6)) ;; true
(= (flat ["a" ["b"] "c"]) '("a" "b" "c")) ;; true
(= (flat '((((:a))))) '(:a)) ;; true
(= (flat '({:a 3})) '(:a 3))
#+END_SRC

** Problem 29
[[http://www.4clojure.com/problem/29][Get the Caps]]
- Write a function which takes a string and returns a new string containing only the capital letters.
#+BEGIN_SRC clojure
(def get-caps (fn [s]
                (apply str (re-seq #"[A-Z]" s))))
(get-caps "HeLlO, WoRlD!") ;; "HLOWRD"
(get-caps "nothing")       ;; ""
(get-caps "$#A(*&987Zf")   ;; "AZ"
#+END_SRC

** Problem 30
[[http://www.4clojure.com/problem/30][Compress a Sequence]]
- Write a function which removes consecutive duplicates from a sequence.
#+BEGIN_SRC clojure
;; PARTITION-BY: https://clojuredocs.org/clojure.core/partition-by
(defn compress-seq [seq]
  (map first (partition-by identity seq)))
(compress-seq "leeeroy") ;; (\l \e \r \o \y)
(apply str (#(map first (partition-by identity %)) "hooowdy")) ;; "howdy"
(apply str (compress-seq "Leeeeeerrroyyy")) ;; => "Leroy"
#+END_SRC

** Problem 31
[[http://www.4clojure.com/problem/31][Pack a Sequence]]
- Write a function which packs consecutive duplicates into sub-lists.
#+BEGIN_SRC clojure
(defn pack-a-seq [coll]
  (partition-by identity coll))
(pack-a-seq [1 1 2 1 1 1 3 3]) '((1 1) (2) (1 1 1) (3 3)) ;; '((1 1) (2) (1 1 1) (3 3))
(pack-a-seq [:a :a :b :b :c]) '((:a :a) (:b :b) (:c)) ;; '((:a :a) (:b :b) (:c))
(pack-a-seq [[1 2] [1 2] [3 4]]) '(([1 2] [1 2]) ([3 4])) ;; '(([1 2] [1 2]) ([3 4]))
#+END_SRC

** Problem 32
[[http://www.4clojure.com/problem/32][Duplicate a Sequence]]
- Write a function which duplicates each element of a sequence.
#+BEGIN_SRC clojure
(defn dupe [coll]
  (mapcat #(repeat 2 %) coll))
(dupe [1 2 3]) ;; => (1 1 2 2 3 3)
#+END_SRC

** Problem 33
[[http://www.4clojure.com/problem/33][Replicate a Sequence]]
- Write a function which replicates each element of a sequence a variable number of times.
#+BEGIN_SRC clojure
;; MAPCAT: https://clojuredocs.org/clojure.core/mapcat
(defn replicate-seq [s n] (mapcat #(repeat n %) s))
(= (replicate-seq [1 2 3] 2) '(1 1 2 2 3 3)) ;; true
(= (replicate-seq [:a :b] 4) '(:a :a :a :a :b :b :b :b)) ;; true
(= (replicate-seq [4 5 6] 1) '(4 5 6)) ;; true
(= (replicate-seq [[1 2] [3 4]] 2) '([1 2] [1 2] [3 4] [3 4])) ;; true
(= (replicate-seq [44 33] 2) [44 44 33 33]) ;; true 
#+END_SRC

** Problem 34
[[http://www.4clojure.com/problem/34][Implement Range]]
- Write a function which creates a list of all integers in a given range.
#+BEGIN_SRC clojure
(defn my-range [start end]
  (loop [s start c []]
    (if (<= end s) c
        (recur (inc s) (conj c s)))))
(my-range 1 5) ;; => (1 2 3 4)
;; This solution also works, but I'm not a huge fan:
(#(take (- %2 %1) (iterate inc %1)) 5 13)
#+END_SRC

** Problem 38
[[http://www.4clojure.com/problem/38][Maximum Value]]
- Write a function which takes a variable number of parameters and returns the maximum value.
#+BEGIN_SRC clojure
(defn max-val [& xs]
  (reduce
   #(if (> %1 %2)
      %1
      %2)
   xs))
(max-val 1 2 3) ;; => 3
(max-val 30 20) ;; => 30
(max-val 45 67 11 20) ;; => 67
#+END_SRC

** Problem 40
[[http://www.4clojure.com/problem/40][Interpose a Seq]]
- Write a function which separates the items of a sequence by an arbitrary value.
#+BEGIN_SRC clojure
(defn interpose-seq [joiner coll]
  (apply str (butlast (mapcat #(vector % joiner) coll))))
(interpose-seq ", " ["first" "second" "third"]) ;; "first, second, third"
(= (interpose-seq 0 [1 2 3]) [1 0 2 0 3]) ;; true
(= (apply str (interpose-seq ", " ["one" "two" "three"])) "one, two, three") ;; true
(= (interpose-seq :z [:a :b :c :d]) [:a :z :b :z :c :z :d]) ;; true
#+END_SRC

** Problem 41
[[http://www.4clojure.com/problem/41][Drop Every Nth Item]]
- Write a function which drops every Nth item from a sequence.
#+BEGIN_SRC clojure
;; PARTITION-ALL: How is it different than partition?
;; Returns a lazy sequence of lists like partition, **but may include
;; partitions with fewer than n items at the end**.  Returns a stateful
;; transducer when no collection is provided.
(defn drop-nth [coll n]
  (apply concat (partition-all (dec n) n coll)))
(drop-nth [5 6 7 8 9] 3) ;; [5 6 7 9]
(= (drop-nth [1 2 3 4 5 6 7 8] 3) [1 2 4 5 7 8])  ;; true
(= (drop-nth [:a :b :c :d :e :f] 2) [:a :c :e])   ;; true
(= (drop-nth [1 2 3 4 5 6] 4) [1 2 3 5 6])        ;; true
#+END_SRC

** Problem 42
[[http://www.4clojure.com/problem/42][Factorial Fun]]
- Write a function which calculates factorials.
#+BEGIN_SRC clojure
(defn factorial [n]
  (reduce * 1 (range 1 (inc n))))
(factorial 6) ;; => 720
;; Or here's a fun one:
;; have to inc the arg because range does not include its upper range in returned seq
(#(->> %
       inc
       range
       rest
       (reduce *)) 18) ;; => 6402373705728000
#+END_SRC

** Problem 45
[[http://www.4clojure.com/problem/45][Intro to Iterate]]
- The iterate function can be used to produce an infinite lazy sequence.
#+BEGIN_SRC clojure
;; The iterate function can be used to produce an infinite lazy sequence.
;; (iterate f x)
;; x returns a lazy sequence of x, (f x), (f (f x)) etc.
(take 5 (iterate #(+ 3 %) 1)) ;; => (1 4 7 10 13)
#+END_SRC

** Problem 47
[[http://www.4clojure.com/problem/47][Contain Yourself]]
- The contains? function checks if a KEY is present in a given collection. This often leads beginner clojurians to use it incorrectly with numerically indexed collections like vectors and lists.
#+BEGIN_SRC clojure
(contains? #{4 5 6} 4)
(contains? [1 1 1 1 1] 4)
(contains? {4 :a 2 :b} 4)
(not (contains? [1 2 4] 4))
4
#+END_SRC

** Problem 48
[[http://www.4clojure.com/problem/48][Intro to some]]
- The some function takes a predicate function and a collection. It returns the first logical true value of (predicate x) where x is an item in the collection.
#+BEGIN_SRC clojure
;; #48: Intro to Some
;; SOME takes a predicate fn and a collection,
;; returning the first true value of (predicate x)
(= 6 (some #{2 7 6} [5 6 7 8]))
(= 6 (some #(when (even? %) %) [5 6 7 8]))
#+END_SRC

** Problem 49
[[http://www.4clojure.com/problem/49][Split a Sequence]]
- Write a function which will split a sequence into two parts.
#+BEGIN_SRC clojure
;; TODO: Solved, but there must be a better way than doing two INTOs
(defn split-seq [n coll]
  (into [] (map #(into []  %) (split-at n coll))))
(split-seq 3 [1 2 3 4 5 6])  ;; => [[1 2 3] [4 5 6]]
(split-seq 1 [:a :b :c :d])  ;; => [[:a] [:b :c :d]]
(= (split-seq 3 [1 2 3 4 5 6]) [[1 2 3] [4 5 6]])              ;; => true
(= (split-seq 1 [:a :b :c :d]) [[:a] [:b :c :d]])              ;; => true
(= (split-seq 2 [[1 2] [3 4] [5 6]]) [[[1 2] [3 4]] [[5 6]]])  ;; => true
#+END_SRC

** Problem 62
[[http://www.4clojure.com/problem/62][Re-implement Iterate]]
Given a side-effect free function f and an initial value x write a function which returns an infinite lazy sequence of x, (f x), (f (f x)), (f (f (f x))), etc.
#+BEGIN_SRC clojure
(def go-iterate (fn [f x]
  (lazy-seq (cons x (my-it f (f x))))))
(take 5 (lazy-iterate #(* 2 %) 1)) ;; => [1 2 4 8 16]
(= (take 100 (lazy-iterate inc 0)) (take 100 (range))) ;; => true
(= (take 9 (lazy-iterate #(inc (mod % 3)) 1)) (take 9 (cycle [1 2 3])))
#+END_SRC

** Problem 63
[[http://www.4clojure.com/problem/63][Group a Sequence]]
- Given a function f and a sequence s, write a function which returns a map. The keys should be the values of f applied to each item in s. The value at each key should be a vector of corresponding items in the order they appear in s.
*Notes:* This one was difficult for me to wrap my brain around, so I'm going to talk through it as I rewrite it. We need to somehow map over our 'xs' if we want to transform them somehow, which means we have to write a function that will operate on every 'x' in the collection, effectively shaping the data. After we shape each individual data structure, we pass it to 'into' to create a map. When a map is being created and it receives a vector with a value for a key, and a vector for a value, it takes care of the structuring for us; that just means we need to massage each 'x' as we map over the collection.
#+BEGIN_SRC clojure
(defn group-seq [f xs]
  (into {}
        (map #(vector (f (first %)) (vec %))
             (partition-by f (sort xs)))))
(group-seq #(> % 5) [1 3 6 8])
;; => {false [1 3], true [6 8]})
(group-seq #(apply / %) [[1 2] [2 4] [4 6] [3 6]])
;; => {1/2 [[1 2] [2 4] [3 6]], 2/3 [[4 6]]})
(group-seq count [[1] [1 2] [3] [1 2 3] [2 3]])
;; => {1 [[1] [3]], 2 [[1 2] [2 3]], 3 [[1 2 3]]})
#+END_SRC

** Problem 66
[[http://www.4clojure.com/problem/66][Greatest Common Divisor]]
- Given two integers, write a function which returns the greatest common divisor.
#+BEGIN_SRC clojure
(defn gcd [n m]
  (first (filter
      #(and (zero? (mod n %))
            (zero? (mod m %)))
      (range n 0 -1))))
(gcd 2 4) ;; 2
(gcd 10 5) ;; 5
(gcd 5 7) ;; 1
(gcd 1023 858) ;; 33
#+END_SRC

** Problem 81
[[http://www.4clojure.com/problem/81][Set Intersection]]
- Write a function which returns the intersection of two sets. The intersection is the sub-set of items that each set has in common.
#+BEGIN_SRC clojure
(defn set-intersect [s1 s2]
  (set (filter #(s1 %) s2)))
(set-intersect #{0 1 2 3} #{2 3 4 5}) ;; #{2 3}
(= (set-intersect #{0 1 2} #{3 4 5}) #{}) ;; true
(= (set-intersect #{:a :b :c :d} #{:c :e :a :f :d}) #{:a :c :d}) ;; true
#+END_SRC

** Problem 83
[[http://www.4clojure.com/problem/83][A Half-Truth]]
- Write a function which takes a variable number of booleans. Your function should return true if some of the parameters are true, but not all of the parameters are true. Otherwise your function should return false.
#+BEGIN_SRC clojure
(defn half-true? [& bools]
  (if (and (some true? bools)
           (some false? bools))
    true false))
;; or, as an inline function:
(#(if (and (some true? %&) (some false? %&)) true false) true false true)
;; tests:
(half-true? false false true)                ;; true
(half-true? true true true)                  ;; false
(half-true? false false false)               ;; false
#+END_SRC

** Problem 90
[[http://www.4clojure.com/problem/90][Cartesian Product]]
- Write a function which calculates the [[https://en.wikipedia.org/wiki/Cartesian_product][Cartesian product]] of two sets.
#+BEGIN_SRC clojure
(defn cartesian-product [sa sb]
  (set (for [x sa
             y sb]
         [x y])))
(cartesian-product #{"ace" "king" "queen"} #{"♠" "♥" "♦" "♣"})
;; => #{["ace" "♠"] ["queen" "♠"] ["ace" "♥"] ["ace" "♦"] ["king" "♣"] ["queen" "♣"] ["queen" "♥"] ["king" "♦"] ["ace" "♣"] ["queen" "♦"] ["king" "♥"] ["king" "♠"]}
(cartesian-product #{1 2 3} #{4 5})
;; => #{[2 5] [3 4] [1 4] [1 5] [2 4] [3 5]}
#+END_SRC

** Problem 99
[[http://www.4clojure.com/problem/99][Product Digits]]
- Write a function which multiplies two numbers and returns the result as a sequence of its digits.
#+BEGIN_SRC clojure
(defn product-digits [n m]
  (into []
        (map
         #(Integer/parseInt (str %))
         (str (* n m)))))
(product-digits 10 10)   ;; [1 0 0]
(product-digits 99 9)    ;; [8 9 1]
(product-digits 999 99)  ;; [9 8 9 0 1]
#+END_SRC

** Problem 107
[[http://www.4clojure.com/problem/107][Simple Closures]]
- Given a positive integer n, return a function (f x) which computes x^n. Observe that the effect of this is to preserve the value of n for use outside the scope in which it is defined.
#+BEGIN_SRC clojure
(defn to-the-nth [n]
  (fn [x]
    (reduce * (repeat n x))))
((to-the-nth 3) 4) ;; 64
;; Using the clojure to create intermediary functions:
(def to-the-8th
  (to-the-nth 8))
(to-the-8th 2) ;; 256
#+END_SRC

** Problem 166
[[http://www.4clojure.com/problem/166][Comparisons]]
- For any orderable data type it's possible to derive all of the basic comparison operations (<, ≤, =, ≠, ≥, and >) from a single operation (any operator but = or ≠ will work). Write a function that takes three arguments, a less than operator for the data and two items to compare. The function should return a keyword describing the relationship between the two items.
#+BEGIN_SRC clojure
(def do-compare (fn [op a b]
     (cond
       (op a b) :lt
       (op b a) :gt
       :else :eq)))
;; tests:
(do-compare < 5 1) ;; :gt
(do-compare (fn [x y] (< (count x) (count y))) "pear" "plum") ;; :eq
(= :lt (do-compare (fn [x y] (< (mod x 5) (mod y 5))) 21 3)) ;; true
(= :gt (do-compare > 0 2)) ;; true
#+END_SRC

* Medium
** Problem 43
[[http://www.4clojure.com/problem/43][Reverse Interleave]]
- Write a function which reverses the interleave process into x number of subsequences.
#+BEGIN_SRC clojure
(defn reverse-interleave [seq n]
  (apply map vector (partition n seq)))
(reverse-interleave [1 2 3 4 5 6] 2)  ;; => ([1 3 5] [2 4 6])
(reverse-interleave (range 9) 3)      ;; => ([0 3 6] [1 4 7] [2 5 8])
(= (reverse-interleave [1 2 3 4 5 6] 2) '((1 3 5) (2 4 6)))             ;; => true
(= (reverse-interleave (range 9) 3) '((0 3 6) (1 4 7) (2 5 8)))         ;; => true
(= (reverse-interleave (range 10) 5) '((0 5) (1 6) (2 7) (3 8) (4 9)))  ;; => true

;; First attempt:
;;(defn reverse-interleave [seq leaves]
;;  (take (/ (count seq) leaves) seq))
#+END_SRC

** Problem 46
[[http://www.4clojure.com/problem/46][Flipping Out]]
- Write a higher-order function which flips the order of the arguments of an input function.
#+BEGIN_SRC clojure
(defn flip [f]
  (fn [a b] (f b a)))
;; Or, as a lambda fn:
#(fn [a b] (% b a))
(= 3 ((flip nth) 2 [1 2 3 4 5]))
(= true ((flip >) 7 8))
(= 4 ((flip quot) 2 8))
(= [1 2 3] ((flip take) [1 2 3 4 5] 3))
#+END_SRC

* Hard
