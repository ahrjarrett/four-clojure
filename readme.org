#+TITLE: 4Clojure Solutions & Notes
#+AUTHOR: Andrew Jarrett
#+EMAIL: ahrjarrett@gmail.com
#+OPTIONS: toc:nil num:nil

My answers to and notes on various [[http://www.4clojure.com/][4Clojure]] problems.

* Elementary
** Problem 3
[[http://www.4clojure.com/problem/3][Intro to Strings]]
- Clojure strings are Java strings. This means that you can use any of the Java string methods on Clojure strings.
#+BEGIN_SRC clojure
(= "HELLO WORLD" (.toUpperCase "hello world"))
#+END_SRC

** Problem 4
[[http://www.4clojure.com/problem/4][Intro to Lists]]
- Lists can be constructed with either a function or a quoted form.
#+BEGIN_SRC clojure
(= (list :a :b :c) '(:a :b :c))
#+END_SRC

** Problem 5
[[http://www.4clojure.com/problem/5][Lists: conj]]
- When operating on a list, the conj function will return a new list with one or more items "added" to the front. Note that there are two test cases, but you are expected to supply only one answer, which will cause all the tests to pass.
#+BEGIN_SRC clojure
(= (list 1 2 3 4) (conj '(2 3 4) 1))
(= (list 1 2 3 4) (conj '(3 4) 2 1))
#+END_SRC

** Problem 6
[[http://www.4clojure.com/problem/6][Intro to Vectors]]
- Vectors can be constructed several ways. You can compare them with lists. *Note:* the brackets [] surrounding the blanks __ are part of the test case.
#+BEGIN_SRC clojure
(= [:a :b :c] (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))
#+END_SRC

** Problem 7
[[http://www.4clojure.com/problem/7][Vectors: conj]]
- When operating on a Vector, the conj function will return a new vector with one or more items "added" to the end.
#+BEGIN_SRC clojure
(= (into [] '(1 2 3 4)) (conj [1 2 3] 4))
#+END_SRC

** Problem 8
[[http://www.4clojure.com/problem/8][Intro to Sets]]
- Sets are collections of unique values.
#+BEGIN_SRC clojure
(= #{:a :b :c :d} (set '(:a :a :b :c :c :c :c :d :d)))
(= #{:a :b :c :d} (clojure.set/union #{:a :b :c} #{:b :c :d}))
#+END_SRC

** Problem 9
[[http://www.4clojure.com/problem/9][Sets: conj]]
- When operating on a set, the conj function returns a new set with one or more keys "added".
#+BEGIN_SRC clojure
(= #{1 2 3 4} (conj #{1 4 3} 2))
#+END_SRC

** Problem 10
[[http://www.4clojure.com/problem/10][Intro to Maps]]
- Maps store key-value pairs. Both maps and keywords can be used as lookup functions. Commas can be used to make maps more readable, but they are not required.
#+BEGIN_SRC clojure
(= 20 ((hash-map :a 10, :b 20, :c 30) :b))
(= 20 (:b {:a 10, :b 20, :c 30}))
#+END_SRC

** Problem 11
[[http://www.4clojure.com/problem/11][Maps: conj]]
- When operating on a map, the conj function returns a new map with one or more key-value pairs "added".
#+BEGIN_SRC clojure
(= {:a 1, :b 2, :c 3} (conj {:a 1} [:b 2] [:c 3]))
#+END_SRC

** Problem 12
[[http://www.4clojure.com/problem/12][Intro to Sequences]]
- All Clojure collections support sequencing. You can operate on sequences with functions like first, second, and last.
#+BEGIN_SRC clojure
(= 3 (first '(3 2 1)))
(= 3 (second [2 3 4]))
(= 3 (last (list 1 2 3)))
#+END_SRC

** Problem 13
[[http://www.4clojure.com/problem/13][Sequences: rest]]
- The rest function will return all the items of a sequence except the first.
#+BEGIN_SRC clojure
(= [20 30 40] (rest [10 20 30 40]))
#+END_SRC

** Problem 14
[[http://www.4clojure.com/problem/14][Intro to Functions]]
- Clojure has many different ways to create functions.
#+BEGIN_SRC clojure
(= 8 ((fn add-five [x] (+ x 5)) 3))
(= 8 ((fn [x] (+ x 5)) 3))
(= 8 (#(+ % 5) 3))
(= 8 ((partial + 5) 3))
#+END_SRC

** Problem 15
[[http://www.4clojure.com/problem/15][Double Down]]
- Write a function which doubles a number.
#+BEGIN_SRC clojure
(defn double-down [n] (* n 2))
(double-down 8)
#+END_SRC

** Problem 16
[[http://www.4clojure.com/problem/16][Hello World]]
- Write a function which returns a personalized greeting.
#+BEGIN_SRC clojure
(defn greeting [name] (str "Hello, " name))
(greeting "Grizzly") ;; => "Hello, Grizzly"
(#(str "Hellow, " %) "Ash") ;; => "Hellow, Ash"
#+END_SRC

** Problem 17
[[http://www.4clojure.com/problem/17][Sequences: map]]
- The map function takes two arguments: a function (f) and a sequence (s). Map returns a new sequence consisting of the result of applying f to each item of s. Do not confuse the map function with the map data structure.
#+BEGIN_SRC clojure
(= (list 6 7 8) (map #(+ % 5) '(1 2 3)))
#+END_SRC

** Problem 18
[[http://www.4clojure.com/problem/18][Sequences: filter]]
- The filter function takes two arguments: a predicate function (f) and a sequence (s). Filter returns a new sequence consisting of all the items of s for which (f item) returns true.
#+BEGIN_SRC clojure
(= '(6 7) (filter #(> % 5) '(3 4 5 6 7)))
#+END_SRC

** Problem 52
[[http://www.4clojure.com/problem/52][Intro to Destructuring]]
- Let bindings and function parameter lists support destructuring.
#+BEGIN_SRC clojure
(= [2 4] (let [[a b c d e] [0 1 2 3 4]] (vector c e))) ;; => true
#+END_SRC

** Problem 64
[[http://www.4clojure.com/problem/64][Intro to Reduce]]
- Reduce takes a 2 argument function and an optional starting value. It then applies the function to the first 2 items in the sequence (or the starting value and the first element of the sequence). In the next iteration the function will be called on the previous return value and the next item from the sequence, thus reducing the entire collection to one value. Don't worry, it's not as complicated as it sounds.
#+BEGIN_SRC clojure
(= 15 (reduce + [1 2 3 4 5]))
(=  0 (reduce + []))
(=  6 (reduce + 1 [2 3]))
#+END_SRC

** Problem 134
[[http://www.4clojure.com/problem/134][A nil key]]
- Write a function which, given a key and map, returns true [[https://en.wikipedia.org/wiki/If_and_only_if][iff]] the map contains an entry with that key and its value is nil.
#+BEGIN_SRC clojure
(defun key-is-nil [k m]
(if (and
    (contains? m k)
    (= (k m) nil))
true
false))
(true?  (nil-check :a {:a nil :b 2})) ;; => true
(false? (nil-check :b {:a nil :b 2})) ;; => true
(false? (nil-check :c {:a nil :b 2})) ;; => true
#+END_SRC

** Problem 156
[[http://www.4clojure.com/problem/156][Map Defaults]]
- Write a function which takes a default value and a sequence of keys and constructs a map.
#+BEGIN_SRC clojure
(defn cons-map [default-val keys]
(zipmap keys (repeat default-val)))
(= (cons-map 0 [:a :b :c]) {:a 0 :b 0 :c 0})
(= (cons-map "x" [1 2 3]) {1 "x" 2 "x" 3 "x"})
(= (cons-map [:a :b] [:foo :bar]) {:foo [:a :b] :bar [:a :b]})
#+END_SRC

** Problem 161
[[http://www.4clojure.com/problem/161][Subset and Superset]]
- Set A is a subset of set B, or equivalently B is a superset of A, if A is "contained" inside B. A and B may coincide.
#+BEGIN_SRC clojure
(clojure.set/superset? #{1 2} #{2}) ;; => true
(clojure.set/subset? #{1} #{1 2}) ;; => true
(clojure.set/superset? #{1 2} #{1 2}) ;; => true
(clojure.set/subset? #{1 2} #{1 2}) ;; => true
#+END_SRC

** Problem 162
[[http://www.4clojure.com/problem/162][Logical falsity and truth]]
- In Clojure, only nil and false represent the values of logical falsity in conditional tests - anything else is logical truth.
#+BEGIN_SRC clojure
(= 1 (if-not false 1 0))
(= 1 (if-not nil 1 0))
(= 1 (if true 1 0))
(= 1 (if [] 1 0))
(= 1 (if [0] 1 0))
(= 1 (if 0 1 0))
(= 1 (if 1 1 0))
#+END_SRC

* Easy
** Problem 19
[[http://www.4clojure.com/problem/19][Last Element]]
- Write a function which returns the last element in a sequence.
#+BEGIN_SRC clojure
#(nth % (- (count %) 1))
;; Here's my old answer. So verbose!
(defn new-last-one [s]
  (if (= (count s) 1) (first s)
      (recur (rest s))))
(= (new-last-one [1 2 3 4 5]) 5)
(= (new-last-one '(5 4 3)) 3)
(= (new-last-one ["b" "c" "d"]) "d")
#+END_SRC

** Problem 20
[[http://www.4clojure.com/problem/20][Penultimate Element]]
- Write a function which returns the second to last element from a sequence.
#+BEGIN_SRC clojure
(defn penultimate [coll]
  (nth coll (- (count coll) 2)))
(= (penultimate (list 1 2 3 4 5)) 4))
(= (penultimate ["a" "b" "c"]) "b")
(= (penultimate [[1 2] [3 4]]) [1 2])
;; bonus round: use RECUR
(defn penultimate-recursive [coll]
  (if (= (count coll) 2) (first coll)
      (recur (rest coll))))
#+END_SRC

** Problem 21
[[http://www.4clojure.com/problem/21][Nth Element]]
- Write a function which returns the Nth element from a sequence.
#+BEGIN_SRC clojure
(defn nth-el [coll n]
  (if (zero? n)
    (first coll)
    (recur (rest coll) (- n 1))))
(= (nth-element '(4 5 6 7) 2) 6)
(= (nth-element [:a :b :c] 0) :a)
(= (nth-element [1 2 3 4] 1) 2)
(= (nth-element '([1 2] [3 4] [5 6]) 2) [5 6])
#+END_SRC

** Problem 22
[[http://www.4clojure.com/problem/22][Count a Sequence]]
- Write a function which returns the total number of elements in a sequence.
#+BEGIN_SRC clojure
(defn count-seq [coll]
  (loop [total 0 c coll]
    (if (empty? c) total
        (recur (inc total) (rest c)))))
(= (count-seq '(1 2 3 3 1)) 5)
(= (count-seq "Hello World") 11)
(= (count-seq [[1 2] [3 4] [5 6]]) 3)
;; Here's count-seq as a reduction:
(defn reduce-count-seq [coll]
  (reduce (fn [a _] (inc a)) 0 coll))
(reduce-count-seq '(1 2 3 4)) ;; => 4
#+END_SRC

** Problem 24
[[http://www.4clojure.com/problem/24][Sum It All Up]]
- Write a function which returns the sum of a sequence of numbers.
#+BEGIN_SRC clojure
(defn sum-it-all-up [coll]
  (reduce + coll))
(= (sum-it-all-up [1 2 3]) 6)
(= (sum-it-all-up (list 0 -2 5 5)) 8)
(= (sum-it-all-up #{4 2 1}) 7)
(= (sum-it-all-up '(0 0 -1)) -1)
(= (sum-it-all-up '(1 10 3)) 14)
#+END_SRC

** Problem 81
[[http://www.4clojure.com/problem/81][Set Intersection]]
- Write a function which returns the intersection of two sets. The intersection is the sub-set of items that each set has in common.
#+BEGIN_SRC clojure
(defn set-intersect [s1 s2]
  (set (filter #(s1 %) s2)))
(set-intersect #{0 1 2 3} #{2 3 4 5}) ;; #{2 3}
(= (set-intersect #{0 1 2} #{3 4 5}) #{}) ;; true
(= (set-intersect #{:a :b :c :d} #{:c :e :a :f :d}) #{:a :c :d}) ;; true
#+END_SRC

** Problem 107
[[http://www.4clojure.com/problem/107][Simple Closures]]
- Given a positive integer n, return a function (f x) which computes x^n. Observe that the effect of this is to preserve the value of n for use outside the scope in which it is defined.
#+BEGIN_SRC clojure
(defn to-the-nth [n]
  (fn [x]
    (reduce * (repeat n x))))
((to-the-nth 3) 4) ;; 64
;; Using the clojure to create intermediary functions:
(def to-the-8th
  (to-the-nth 8))
(to-the-8th 2) ;; 256
#+END_SRC

** Problem 166
[[http://www.4clojure.com/problem/166][Comparisons]]
For any orderable data type it's possible to derive all of the basic comparison operations (<, ≤, =, ≠, ≥, and >) from a single operation (any operator but = or ≠ will work). Write a function that takes three arguments, a less than operator for the data and two items to compare. The function should return a keyword describing the relationship between the two items.
#+BEGIN_SRC clojure
(def do-compare (fn [op a b]
     (cond
       (op a b) :lt
       (op b a) :gt
       :else :eq)))
;; tests:
(do-compare < 5 1) ;; :gt
(do-compare (fn [x y] (< (count x) (count y))) "pear" "plum") ;; :eq
(= :lt (do-compare (fn [x y] (< (mod x 5) (mod y 5))) 21 3)) ;; true
(= :gt (do-compare > 0 2)) ;; true
#+END_SRC

* Medium
* Hard
